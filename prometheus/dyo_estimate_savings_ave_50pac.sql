# DYO Estimated Savings Calc no ra/sa#####DO WE WANT TO ADD ANY FILTERING?#create ratios and averages by condition by leveldrop table if exists RED_ALL_LEVELS;create index lvl1 on level_5(level_1);create index medidred on report_episode_detail(master_episode_id);create table RED_ALL_LEVELS asselect report_episode_detail.*,level_5.LEVEL_1,level_5.LEVEL_2,level_5.LEVEL_3,level_5.LEVEL_4,level_5.LEVEL_5from report_episode_detailjoin level_5on report_episode_detail.master_episode_id=level_5.level_1group by master_episode_id, level, filter_id;drop table if exists savings_calc_epis;create table  savings_calc_epis asSELECTRED_ALL_LEVELS.filter_id,RED_ALL_LEVELS.member_id,RED_ALL_LEVELS.master_episode_id,RED_ALL_LEVELS.episode_id,RED_ALL_LEVELS.episode_name,RED_ALL_LEVELS.episode_type,RED_ALL_LEVELS.MDC,RED_ALL_LEVELS.mdc_description,RED_ALL_LEVELS.level,RED_ALL_LEVELS.episode_begin_date,RED_ALL_LEVELS.episode_end_date,RED_ALL_LEVELS.`Split_Total_PAC_Cost`,RED_ALL_LEVELS.`Split_Total_Typical_Cost`,RED_ALL_LEVELS.`Annualized_Split_Total_PAC_Cost`,RED_ALL_LEVELS.`Annualized_Split_Total_Typical_Cost`,report_episode_summary.`Split_Average_Typical_Cost`,report_episode_summary.Annualized_Split_Average_Typical_Cost,case when left(RED_ALL_LEVELS.episode_id,2)="EC" and RED_ALL_LEVELS.`Annualized_Split_Total_Typical_Cost`>report_episode_summary.`Annualized_Split_Average_Typical_Cost` then  RED_ALL_LEVELS.`Annualized_Split_Total_Typical_Cost`-report_episode_summary.`Annualized_Split_Average_Typical_Cost`when left(RED_ALL_LEVELS.episode_id,2)="EC" and RED_ALL_LEVELS.`Annualized_Split_Total_Typical_Cost`<report_episode_summary.`Annualized_Split_Average_Typical_Cost` then  0when  left(RED_ALL_LEVELS.episode_id,2) in ("EA","EP","EX","EX") and RED_ALL_LEVELS.`Split_Total_Typical_Cost` > report_episode_summary.`Split_Average_Typical_Cost` then  RED_ALL_LEVELS.`Split_Total_Typical_Cost`-report_episode_summary.`Split_Average_Typical_Cost` when left(RED_ALL_LEVELS.episode_id,2) in ("EA","EP","EX","EX")  and RED_ALL_LEVELS.`Split_Total_Typical_Cost` < report_episode_summary.`Split_Average_Typical_Cost` then  0 endas Potential_Typical_Savings,case when left(RED_ALL_LEVELS.episode_id,2)="EC" then RED_ALL_LEVELS.`Annualized_Split_Total_PAC_Cost`/2 else RED_ALL_LEVELS.`Split_Total_PAC_Cost`/2 end as Potential_PAC_Savings,RED_ALL_LEVELS.level_1,RED_ALL_LEVELS.level_2,RED_ALL_LEVELS.level_3,RED_ALL_LEVELS.level_4,RED_ALL_LEVELS.level_5from RED_ALL_LEVELSjoin report_episode_summaryon RED_ALL_LEVELS.episode_id=report_episode_summary.episode_id and RED_ALL_LEVELS.level=report_episode_summary.level and RED_ALL_LEVELS.filter_id=report_episode_summary.filter_id;drop table if exists DYO_SAVINGS_BY_EPI;create table DYO_SAVINGS_BY_EPI asSELECTfilter_id,episode_id,episode_name,episode_type,level,count(*) as episode_volume,SUM(Potential_PAC_Savings) as Total_Potential_PAC_Savings,SUM(Potential_Typical_Savings) as Total_Potential_Typical_Savingsfrom savings_calc_epis where level=1group by savings_calc_epis.episode_id, savings_calc_epis.level, savings_calc_epis.filter_idunionSELECTfilter_id,episode_id,episode_name,episode_type,level,count(*) as episode_volume,SUM(Potential_PAC_Savings) as Total_Potential_PAC_Savings,SUM(Potential_Typical_Savings) as Total_Potential_Typical_Savingsfrom savings_calc_epis where level=2 and master_episodE_id=level_2group by savings_calc_epis.episode_id, savings_calc_epis.level, savings_calc_epis.filter_idunionSELECTfilter_id,episode_id,episode_name,episode_type,level,count(*) as episode_volume,SUM(Potential_PAC_Savings) as Total_Potential_PAC_Savings,SUM(Potential_Typical_Savings) as Total_Potential_Typical_Savingsfrom savings_calc_epis where level=3 and master_episodE_id=level_3group by savings_calc_epis.episode_id, savings_calc_epis.level, savings_calc_epis.filter_idunionSELECTfilter_id,episode_id,episode_name,episode_type,level,count(*) as episode_volume,SUM(Potential_PAC_Savings) as Total_Potential_PAC_Savings,SUM(Potential_Typical_Savings) as Total_Potential_Typical_Savingsfrom savings_calc_epis where level=4 and master_episodE_id=level_4group by savings_calc_epis.episode_id, savings_calc_epis.level, savings_calc_epis.filter_idunionSELECTfilter_id,episode_id,episode_name,episode_type,level,count(*) as episode_volume,SUM(Potential_PAC_Savings) as Total_Potential_PAC_Savings,SUM(Potential_Typical_Savings) as Total_Potential_Typical_Savingsfrom savings_calc_epis where level=5 and master_episodE_id=level_5group by savings_calc_epis.episode_id, savings_calc_epis.level, savings_calc_epis.filter_id;